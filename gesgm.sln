/*
   ___                            
  /   \                           
 |  |_|   ___  ____  ____  _ __  ___      
 | \\_`\ / _ \/ __| / __ \| '_ `'_  \       
 \ \_| |\  __/\__ \| (_| \| | | | | |    
 \____|  \___||___|\___, ||_| |_| |_|  
                   | |_| |                                    
                   \____| 
Copyright (c) 2019, Kang Baekjun
*/
]#include "dPrep.cpp"

FILE* fp1, *fp2;

void clearLineFromReadBuffer(void);
class User
{
public:
	void getpw(void);
	int recallUser(TCHAR* rec);
	int makeRandName(void);
	void showName(void) { _tprintf(_T("Your name is %s \nLogged in!\n"), name); }
	void sendMoney(TCHAR* rec, int money);
private:
	TCHAR name[4];
	TCHAR txt_name[8];
	TCHAR pw[20];
	int made = 0;
};
void User::getpw(void)
{
	_tprintf(_T("비밀번호를 입력하세요: "));
	_tscanf(_T("%s"), pw);
	clearLineFromReadBuffer();
}
int User::recallUser(TCHAR* rec)
{
	int i, same = 0;
	TCHAR line_name[4], line_pw[20] = { 0, };   //파일에서 가져올 이름과 비밀번호 
	TCHAR title[10]="title ";

	for (i = 0; i < 3; i++) name[i] = rec[i];
	for (i = 0; i < 3; i++) txt_name[i] = name[i];
	name[3] = '\0'; txt_name[3] = '\0';
	_tcscat(txt_name, TXT);
	txt_name[7] = '\0';

	fp1 = fopen(NAMES, RT);
	while (_ftscanf(fp1, _T("%s %s"), line_name, line_pw) == 2)
	{
		if (_tcscmp(line_name, name) == 0)
		{
			same = 1;
			break;
		}
	}
	if (!same)
	{
		_putts(_T("없는 사용자입니다!"));
		return 0;
	}

	getpw();
	if (_tcscmp(line_pw, pw) != 0)
	{
		_putts(_T("비밀번호가 일치하지 않습니다!"));
		return 0;
	}
	
	system(_tcscat(title, name));
	
	fclose(fp1);
	return 1;
}
int User::makeRandName(void)
{
	if (made) return 0;   //한번 사용자 이름과 비밀번호를 등록하면 다시 등록할 수 없음. 현재는 필요없으나 나중에 더 복잡한 기능을 구현할 것을 염두에 둔 코드

	TCHAR line_name[4], line_pw[20];   //파일에서 가져올 이름과 비밀번호 
	TCHAR title[10]="title ";
	int i, same = 0;

	/*랜덤 함수 시드 생성*/
	srand(time(NULL));

	fp1 = fopen(NAMES, RT);

	/*중복 검사*/
	while (1)
	{
		for (i = 0; i < 3; i++) name[i] = rand() % 26 + 97;
		while (_ftscanf(fp1, _T("%s %s"), line_name, line_pw) == 2)
		{
			if (_tcscmp(line_name, name) == 0)
			{
				same = 1;
				break;
			}
		}
		if (same) continue;
		else
		{
			getpw();
			break;
		}
	}

	for (i = 0; i < 3; i++) txt_name[i] = name[i];
	name[3] = '\0'; txt_name[3] = '\0';
	made = 1;

	fp1 = fopen(NAMES, AT);
	_ftprintf(fp1, _T("%s %s\n"), name, pw);
	fclose(fp1);

	_tcscat(txt_name, TXT);
	txt_name[7] = '\0';
	
	system(_tcscat(title, name));
	
	/*사용자 이름의 텍스트 파일 생성*/
	fp2 = fopen(txt_name, AT);
	fclose(fp2);
	return 1;
}
void User::sendMoney(TCHAR* rec, int money)
{
	TCHAR txt_rec[8];

	rec[3] = '\0';
	_tcscpy(txt_rec, rec);
	txt_rec[3] = '\0';
	_tcscat(txt_rec, TXT);
	txt_rec[7] = '\0';

	fp2 = fopen(txt_name, AT);
	_ftprintf(fp2, _T("%s->%s %d원\n"), name, rec, money);
	fclose(fp2);
	fp2 = fopen(txt_rec, AT);
	_ftprintf(fp2, _T("%s<-%s %d원\n"), rec, name, money);
	fclose(fp2);

	_putts(_T("Success!"));
}
void clearLineFromReadBuffer(void) { while (_gettchar() != '\n'); }


int _tmain(int argc, TCHAR* argv[])
{
	/*주 코드 실행을 위한 정의*/
	int c1;
	TCHAR c2;
	TCHAR name[4], rec[4];
	TCHAR line_name[4], line_pw[20];
	int money;
	User usr;

	/*프로세스 실행을 위한 정의*/
	STARTUPINFO si = { 0, };
	PROCESS_INFORMATION pi;
	si.cb = sizeof(si);
	
	/*usedNames.txt 생성*/
	fp1 = fopen(NAMES, AT);
	fclose(fp1);

	/*사용자의 종류 입력*/
	_tprintf(_T("이미 있는 사용자: 1\n등록되지 않은 사용자: 2\n"));
	_tscanf(_T("%d"), &c1);
	clearLineFromReadBuffer();
	system(CLS);

	/*사용자의 종류에 따른 분기문*/
	if (c1 == 1)
	{
		_tprintf(_T("이름을 입력하세요: "));
		_tscanf(_T("%s"), name);
		if (!usr.recallUser(name)) return 0;
		usr.showName();
	}
	else
	{
		_putts(_T("계정을 생성합니다..."));
		if (!usr.makeRandName()) return 0;
		usr.showName();
	}

	/*다른 사용자의 이름을 모를 경우*/
	_tprintf(_T("종료할까요? [Y/N]"));
	_tscanf(_T("%c"), &c2);
	clearLineFromReadBuffer();
	if ((c2 == 'Y') || (c2 == 'y'))
	{
		_putts(_T("종료합니다..."));
		return 0;
	}

	/*송금*/
	system(CLS);
	_putts("현재 등록된 사용자들은 다음과 같습니다. ");
	fp1 = fopen(NAMES, RT);
	while (_ftscanf(fp1, _T("%s %s"), line_name, line_pw) == 2) _putts(line_name);
	_tprintf(_T("돈을 받으실 분의 이름을 입력해주세요: "));
	_tscanf(_T("%s"), rec);
	clearLineFromReadBuffer();
	if (_tcscmp(name, rec) == 0)
	{
		_putts(_T("자신에게 송금할 수 없습니다!"));
		return 0;
	}

	system(CLS);
	_tprintf(_T("보내실 금액을 입력해주세요(편의를 위해 계산기가 실행됩니다): "));

	/*계산기 실행*/
	CreateProcess(NULL, COMMAND, NULL, NULL, TRUE, NULL, NULL, NULL, &si, &pi);

	/*실제 송금 함수 실행*/
	_tscanf(_T("%d"), &money);
	clearLineFromReadBuffer();
	usr.sendMoney(rec, money);

	/*계산기 종료*/
	system(KCALC);
	CloseHandle(pi.hProcess);

	return 0;
}
